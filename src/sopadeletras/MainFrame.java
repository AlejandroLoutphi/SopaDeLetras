/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sopadeletras;

import datastructures.LinkedList;
import datastructures.AdjacencyMatrixGraph;
import datastructures.BreadthFirstSearchVisReturn;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import java.io.File;
import javax.swing.JOptionPane;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JLabel;
import static javax.swing.SwingConstants.CENTER;
import org.graphstream.graph.Graph;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swing_viewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.layout.springbox.implementations.LinLog;

/**
 * Main Window for the SopaDeLetras project.
 *
 * @author ayahzaheraldeen
 * @author Alejandro Loutphi
 * @author luciano
 */
public class MainFrame extends javax.swing.JFrame {
    private long startTime;
    private AdjacencyMatrixGraph<Character> graphA;

    /**
     * Constructs new JFrameForm: The Main Window of this project.
     */
    public MainFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setBackground(new java.awt.Color(160, 158, 214));
        this.DictionaryText.setBackground(new java.awt.Color(255, 255, 255));
        JLabel[] labels = { jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9, jLabel10,
                jLabel11, jLabel12, jLabel13, jLabel14, jLabel15, jLabel16 };
        for (JLabel label : labels) {
            label.setVisible(false);
        }
        jLabel1.setHorizontalAlignment(CENTER);
        jLabel2.setHorizontalAlignment(CENTER);
        jLabel3.setHorizontalAlignment(CENTER);
        jLabel4.setHorizontalAlignment(CENTER);
        jLabel5.setHorizontalAlignment(CENTER);
        jLabel6.setHorizontalAlignment(CENTER);
        jLabel7.setHorizontalAlignment(CENTER);
        jLabel8.setHorizontalAlignment(CENTER);
        jLabel9.setHorizontalAlignment(CENTER);
        jLabel10.setHorizontalAlignment(CENTER);
        jLabel11.setHorizontalAlignment(CENTER);
        jLabel12.setHorizontalAlignment(CENTER);
        jLabel13.setHorizontalAlignment(CENTER);
        jLabel14.setHorizontalAlignment(CENTER);
        jLabel15.setHorizontalAlignment(CENTER);
        jLabel16.setHorizontalAlignment(CENTER);
    }

    /**
     * Starts a timer. Sets TimeLabel text to 0ms.
     */
    private void startTimer() {
        TimeLabel.setText("Tiempo: 0ms");
        startTime = System.nanoTime();
    }

    /**
     * Stops the timer set by startTimer(). Sets TimeLabel text to the time ellapsed
     * since startTimer() was called in ms.
     */
    private void stopTimer() {
        double ellapsedTime = (double) (System.nanoTime() - startTime);
        TimeLabel.setText("Tiempo:" + String.format("%.2f", ellapsedTime / 1000000) + "ms");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        SaveButton = new javax.swing.JButton();
        InputWord = new javax.swing.JTextField();
        Title = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        LoadButton = new javax.swing.JButton();
        FindWordButton = new javax.swing.JButton();
        VisualizeGraphButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        TimeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DictionaryPane = new javax.swing.JScrollPane();
        DictionaryText = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        SearchDictionaryButton = new javax.swing.JButton();
        AddToDictionaryButton = new javax.swing.JButton();
        InstructionsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(160, 158, 214));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(160, 158, 214));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SaveButton.setBackground(new java.awt.Color(145, 33, 143));
        SaveButton.setFont(new java.awt.Font("BM Hanna Pro", 1, 14)); // NOI18N
        SaveButton.setForeground(java.awt.Color.white);
        SaveButton.setText("Guardar");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(SaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 270, -1, -1));

        InputWord.setBackground(new java.awt.Color(244, 235, 254));
        jPanel1.add(InputWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 320, 150, -1));

        Title.setBackground(new java.awt.Color(75, 37, 109));
        Title.setFont(new java.awt.Font("BM Hanna Pro", 1, 36)); // NOI18N
        Title.setForeground(new java.awt.Color(75, 37, 109));
        Title.setText("Sopa De Letras");
        jPanel1.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 270, 30));

        jComboBox1.setBackground(new java.awt.Color(207, 151, 215));
        jComboBox1.setFont(new java.awt.Font("BM Hanna Pro", 1, 14)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BFS", "DFS" }));
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, -1, -1));

        LoadButton.setBackground(new java.awt.Color(111, 84, 174));
        LoadButton.setFont(new java.awt.Font("BM Hanna Pro", 1, 14)); // NOI18N
        LoadButton.setForeground(new java.awt.Color(255, 255, 255));
        LoadButton.setText("Cargar Archivo");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });
        jPanel1.add(LoadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 180, -1));

        FindWordButton.setBackground(new java.awt.Color(145, 33, 143));
        FindWordButton.setFont(new java.awt.Font("BM Hanna 11yrs Old", 1, 14)); // NOI18N
        FindWordButton.setForeground(java.awt.Color.white);
        FindWordButton.setText("Buscar Palabra");
        FindWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindWordButtonActionPerformed(evt);
            }
        });
        jPanel1.add(FindWordButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 360, -1, -1));

        VisualizeGraphButton.setBackground(new java.awt.Color(145, 33, 143));
        VisualizeGraphButton.setFont(new java.awt.Font("BM Hanna 11yrs Old", 1, 14)); // NOI18N
        VisualizeGraphButton.setForeground(java.awt.Color.white);
        VisualizeGraphButton.setText("Mostrar Recorrido de BFS");
        VisualizeGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualizeGraphButtonActionPerformed(evt);
            }
        });
        jPanel1.add(VisualizeGraphButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, -1, -1));

        jLabel18.setFont(new java.awt.Font("BM Hanna Pro", 1, 30)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(110, 0, 108));
        jLabel18.setText("Diccionario:");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 70, 190, 30));

        jLabel19.setFont(new java.awt.Font("BM Hanna 11yrs Old", 1, 15)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(75, 37, 109));
        jLabel19.setText("Palabra :");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 320, 80, 20));

        TimeLabel.setBackground(new java.awt.Color(160, 158, 214));
        TimeLabel.setFont(new java.awt.Font("BM Hanna 11yrs Old", 1, 20)); // NOI18N
        TimeLabel.setForeground(new java.awt.Color(110, 0, 108));
        TimeLabel.setText("Tiempo: 0ms");
        TimeLabel.setOpaque(true);
        jPanel1.add(TimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 190, 20));

        jLabel1.setBackground(new java.awt.Color(244, 235, 254));
        jLabel1.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(75, 37, 109));
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel1.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel1.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 50, 40));

        jLabel2.setBackground(new java.awt.Color(244, 235, 254));
        jLabel2.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(75, 37, 109));
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel2.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel2.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 50, 40));

        jLabel3.setBackground(new java.awt.Color(244, 235, 254));
        jLabel3.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(75, 37, 109));
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel3.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel3.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, 50, 40));

        jLabel4.setBackground(new java.awt.Color(244, 235, 254));
        jLabel4.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(75, 37, 109));
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel4.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel4.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 50, 40));

        jLabel5.setBackground(new java.awt.Color(244, 235, 254));
        jLabel5.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(75, 37, 109));
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel5.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel5.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 50, 40));

        jLabel6.setBackground(new java.awt.Color(244, 235, 254));
        jLabel6.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(75, 37, 109));
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel6.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel6.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 50, 40));

        DictionaryText.setBackground(new java.awt.Color(244, 235, 254));
        DictionaryText.setForeground(new java.awt.Color(153, 153, 255));
        DictionaryText.setAutoscrolls(true);
        DictionaryText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        DictionaryText.setOpaque(true);
        DictionaryPane.setViewportView(DictionaryText);

        jPanel1.add(DictionaryPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 240, 160));

        jLabel7.setBackground(new java.awt.Color(244, 235, 254));
        jLabel7.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(75, 37, 109));
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel7.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel7.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 50, 40));

        jLabel8.setBackground(new java.awt.Color(244, 235, 254));
        jLabel8.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(75, 37, 109));
        jLabel8.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel8.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel8.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 50, 40));

        jLabel9.setBackground(new java.awt.Color(244, 235, 254));
        jLabel9.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(75, 37, 109));
        jLabel9.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel9.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel9.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 50, 40));

        jLabel10.setBackground(new java.awt.Color(244, 235, 254));
        jLabel10.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(75, 37, 109));
        jLabel10.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel10.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel10.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 50, 40));

        jLabel11.setBackground(new java.awt.Color(244, 235, 254));
        jLabel11.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(75, 37, 109));
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel11.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel11.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 50, 40));

        jLabel12.setBackground(new java.awt.Color(244, 235, 254));
        jLabel12.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(75, 37, 109));
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel12.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel12.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 50, 40));

        jLabel13.setBackground(new java.awt.Color(244, 235, 254));
        jLabel13.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(75, 37, 109));
        jLabel13.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel13.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel13.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 50, 40));

        jLabel14.setBackground(new java.awt.Color(246, 143, 160));
        jLabel14.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(75, 37, 109));
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel14.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel14.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 270, 50, 40));

        jLabel15.setBackground(new java.awt.Color(244, 235, 254));
        jLabel15.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(75, 37, 109));
        jLabel15.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel15.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel15.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 270, 50, 40));

        jLabel16.setBackground(new java.awt.Color(244, 235, 254));
        jLabel16.setFont(new java.awt.Font("October Condensed Devanagari", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(75, 37, 109));
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jLabel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 37, 109), 3, true));
        jLabel16.setMaximumSize(new java.awt.Dimension(44, 44));
        jLabel16.setMinimumSize(new java.awt.Dimension(44, 44));
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 50, 40));

        SearchDictionaryButton.setBackground(new java.awt.Color(145, 33, 143));
        SearchDictionaryButton.setFont(new java.awt.Font("BM Hanna Pro", 1, 14)); // NOI18N
        SearchDictionaryButton.setForeground(java.awt.Color.white);
        SearchDictionaryButton.setText("Buscar Palabras");
        SearchDictionaryButton.setPreferredSize(new java.awt.Dimension(139, 29));
        SearchDictionaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDictionaryButtonActionPerformed(evt);
            }
        });
        jPanel1.add(SearchDictionaryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, 150, -1));

        AddToDictionaryButton.setBackground(new java.awt.Color(145, 33, 143));
        AddToDictionaryButton.setFont(new java.awt.Font("BM Hanna 11yrs Old", 1, 14)); // NOI18N
        AddToDictionaryButton.setForeground(java.awt.Color.white);
        AddToDictionaryButton.setText("Añadir a Diccionario");
        AddToDictionaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToDictionaryButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AddToDictionaryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 360, -1, -1));

        InstructionsButton.setBackground(new java.awt.Color(111, 84, 174));
        InstructionsButton.setFont(new java.awt.Font("BM Hanna Pro", 1, 14)); // NOI18N
        InstructionsButton.setForeground(new java.awt.Color(255, 255, 255));
        InstructionsButton.setText("Instrucciones");
        InstructionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstructionsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(InstructionsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 180, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 570, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Creates an InstructionsFrame when InstructionsButton is pressed.
     */
    private void InstructionsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_InstructionsButtonActionPerformed
        if (evt.getSource() == InstructionsButton) {
            InstructionsFrame instructionsFrame = new InstructionsFrame();
            instructionsFrame.setVisible(true);

        } // GEN-LAST:event_InstructionsButtonActionPerformed
    }

    /**
     * Adds the word in the InputWord text field when AddToDictionaryButton is
     * pressed.
     */
    private void AddToDictionaryButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_AddToDictionaryButtonActionPerformed
        String newWord = InputWord.getText().trim();

        // Check if the length of the new word is at least 3
        if (newWord.length() < 3) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe tener al menos 3 letras.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the word only contains letters
        if (!newWord.chars().allMatch(Character::isLetter)) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe solo contener letras", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        newWord = newWord.toUpperCase();
        int wordCount = DictionaryText.getText().split("<br>").length;

        // Add the new word to the DictionaryText
        DictionaryText.setText(DictionaryText.getText()
                + "<font color=black>"
                + Integer.toString(wordCount + 1)
                + ". "
                + newWord.toUpperCase()
                + "</font><br>");
        InputWord.setText("");

    }// GEN-LAST:event_AddToDictionaryButtonActionPerformed

    /**
     * Searches the graph for all the words in DictionaryText and colors them red or
     * green when SearchDictionaryButton is pressed. Also times the graph traversal
     * step.
     */
    private void SearchDictionaryButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SearchDictionaryButtonActionPerformed
        String selectedAlgorithm = (String) jComboBox1.getSelectedItem();
        if (selectedAlgorithm == null) {
            JOptionPane.showMessageDialog(this, "Please select a search algorithm.");
            return;
        }

        String[] dictionaryEntries = DictionaryText.getText().substring(6).split("<br>");
        String[] dictionaryWords = new String[dictionaryEntries.length];
        int wordStart;
        int wordEnd;
        for (int i = 0; i < dictionaryEntries.length; i++) {
            wordStart = dictionaryEntries[i].indexOf(">") + 1;
            wordEnd = dictionaryEntries[i].indexOf("/") - 1;
            dictionaryEntries[i] = dictionaryEntries[i].substring(wordStart, wordEnd);
            wordStart = dictionaryEntries[i].indexOf(" ") + 1;
            dictionaryWords[i] = dictionaryEntries[i].substring(wordStart);
        }

        boolean[] wordFound = new boolean[dictionaryWords.length];

        startTimer();

        for (int i = 0; i < dictionaryWords.length; i++) {
            if ("BFS".equals(selectedAlgorithm)) {
                wordFound[i] = foundStringBfs(dictionaryWords[i]);
            } else {
                wordFound[i] = foundStringDfs(dictionaryWords[i]);
            }
        }

        stopTimer();

        for (int i = 0; i < dictionaryEntries.length; i++) {
            if (wordFound[i]) {
                dictionaryEntries[i] = "<font color=green>" + dictionaryEntries[i] + "</font>";
            } else {
                dictionaryEntries[i] = "<font color=red>" + dictionaryEntries[i] + "</font>";
            }
        }
        DictionaryText.setText("<html>" + String.join("<br>", dictionaryEntries) + "<br>");
    }// GEN-LAST:event_SearchDictionaryButtonActionPerformed

    /**
     * Creates a JFileChooser window and, with the inputs of the passed-in file,
     * loads the graph, board, and dictionary. Is called when LoadButton is pressed.
     */
    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_LoadButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        File selectedFile = null;
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();

        }
        try {
            LinkedList<String> dictionaryWords = readFile(selectedFile);
            if (dictionaryWords == null) {
            JOptionPane.showMessageDialog(this, "Error: Archivo Inválido", "Error de Archivo",
                    JOptionPane.ERROR_MESSAGE);
            }
            displayDictionaryWords(dictionaryWords);
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error" + e.getMessage(), "Error de Archivo",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Creates a GraphStream window that renders the passed AdjacencyMatrixGraph.
     */
    private void visualizeGraph(AdjacencyMatrixGraph<Character> graph) {
        Graph vis = new SingleGraph("");
        String vertexOrEdgeId;
        for (int i = 0; i < graph.size(); i++) {
            vertexOrEdgeId = Integer.toString(i);
            vis.addNode(vertexOrEdgeId);
            vis.getNode(vertexOrEdgeId).setAttribute("ui.label", graph.get(i));
            vis.getNode(vertexOrEdgeId).setAttribute("ui.style",
                    "text-alignment: under;"
                            + "text-size: 40;");

            vis.getNode(vertexOrEdgeId).setAttribute("ui.hide");
            vis.getNode(vertexOrEdgeId).setAttribute("layout.weight", 0.5);
        }

        for (int i = 0; i < graph.size(); i++) {
            for (int j = 0; j < graph.size(); j++) {
                if (graph.hasEdge(i, j)) {
                    vertexOrEdgeId = Integer.toString(i) + "-" + Integer.toString(j);
                    vis.getNode(Integer.toString(i)).removeAttribute("ui.hide");
                    vis.getNode(Integer.toString(j)).removeAttribute("ui.hide");
                    vis.addEdge(vertexOrEdgeId, Integer.toString(i), Integer.toString(j), true);
                }
            }
        }

        System.setProperty("org.graphstream.ui", "swing");
        Viewer viewer = vis.display();
        viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.HIDE_ONLY);
        ViewPanel viewPanel = (ViewPanel) viewer.getDefaultView();
        viewPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        viewer.enableAutoLayout(new LinLog());
    }

    /**
     * Returns true if the passed-in word could be found in the graph. Otherwise,
     * false. Uses a Breadth First Search.
     * 
     * @return true if the passed-in word could be found in the graph. Otherwise,
     *         false
     */
    private boolean foundStringBfs(String word) {
        char[] wordArray = word.toCharArray();
        Character[] wordCharacters = new Character[wordArray.length];
        for (int i = 0; i < wordArray.length; i++) {
            wordCharacters[i] = wordArray[i];
        }
        return graphA.breadthFirstSearchArray(wordCharacters);
    }

    /**
     * Returns true if the passed-in word could be found in the graph. Otherwise,
     * false. Uses a Breadth First Search and creates a GraphStream window rendering
     * its traversal tree.
     * 
     * @return true if the passed-in word could be found in the graph. Otherwise,
     *         false
     */
    private boolean foundStringBfsWithVis(String word) {
        char[] wordArray = word.toCharArray();
        Character[] wordCharacters = new Character[wordArray.length];
        for (int i = 0; i < wordArray.length; i++) {
            wordCharacters[i] = wordArray[i];
        }
        BreadthFirstSearchVisReturn<Character> packedVis;
        packedVis = graphA.breadthFirstSearchArrayWithVis(wordCharacters);
        visualizeGraph(packedVis.getGraph());
        return packedVis.getFound();
    }

    /**
     * Returns true if the passed-in word could be found in the graph. Otherwise,
     * false. Uses a Depth First Search.
     * 
     * @return true if the passed-in word could be found in the graph. Otherwise,
     *         false
     */
    private boolean foundStringDfs(String word) {
        char[] wordArray = word.toCharArray();
        Character[] wordCharacters = new Character[wordArray.length];
        for (int i = 0; i < wordArray.length; i++) {
            wordCharacters[i] = wordArray[i];
        }
        return graphA.depthFirstSearchArray(wordCharacters);
    }

    /**
     * Searches the graph for the word in the InputWord text field when
     * SearchDictionaryButton is pressed. Also times the graph traversal
     * step.
     */
    private void FindWordButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FindWordButtonActionPerformed
        String selectedAlgorithm = (String) jComboBox1.getSelectedItem();
        String word = InputWord.getText().trim().toUpperCase();

        // Check if the length of the new word is at least 3
        if (word.length() < 3) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe tener al menos 3 letras.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the word only contains letters
        if (!word.chars().allMatch(Character::isLetter)) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe solo contener letras", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean wordFound;
        startTimer();

        switch (selectedAlgorithm) {
            case "BFS":
                wordFound = foundStringBfs(word);
                break;
            case "DFS":
                wordFound = foundStringDfs(word);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select a search algorithm.");
                stopTimer();
                return;
        }

        stopTimer();

        if (wordFound) {
            JOptionPane.showMessageDialog(this, "Palabra Encontrada!");
        } else {
            JOptionPane.showMessageDialog(this, "Palabra no Encontrada.");
        }

    }// GEN-LAST:event_FindWordButtonActionPerformed

    /**
     * Searches the graph for the word in the InputWord text field with a
     * breadth-first-search and shows a visualization of its traversal tree with a
     * GraphStream window when
     * SearchDictionaryButton is pressed.
     * step.
     */
    private void VisualizeGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_VisualizeGraphButtonActionPerformed
        String word = InputWord.getText().trim().toUpperCase();

        // Check if the length of the new word is at least 3
        if (word.length() < 3) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe tener al menos 3 letras.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the word only contains letters
        if (!word.chars().allMatch(Character::isLetter)) {
            // Show an error message if the word is invalid
            JOptionPane.showMessageDialog(this, "La palabra debe solo contener letras", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        foundStringBfsWithVis(word);
    }

    /**
     * Adds the words in the passed-in LinkedList<String> to DictionaryText with the
     * required formatting.
     * 
     * @param dictionaryWords String's to add to DictionaryText
     */
    private void displayDictionaryWords(LinkedList<String> dictionaryWords) {
        String sb = "<html>";
        int counter = 0;

        while (counter < dictionaryWords.size()) {
            String word = "";
            try {
                word = dictionaryWords.getStringIndex(counter);
            } catch (Exception e) {
            }
            sb += "<font color=black>" + Integer.toString(counter + 1) + ". " + word + "</font><br>";
            counter++;
        }
        DictionaryText.setText(sb);
    }

    /**
     * Constructs a text file with the current dictionary and board parameters that
     * can be later input to this program again, and creates a JFileChooser window
     * so the user can specify where to save it. Is called when SaveButton is
     * pressed.
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Save the contents of the DictionaryText to a file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo de diccionario");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            saveDictionaryToFile(fileToSave);
            JOptionPane.showMessageDialog(this, "El Diccionario Ha Sido Guardado Exitosamente!", "Guardado Exitoso",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Constructs a text file with the current dictionary and board parameters that
     * can be later input to this program again, and stores them in the passed-in
     * File object.
     * 
     * @param file file to write
     */
    private void saveDictionaryToFile(File file) {
        StringBuilder content = new StringBuilder();

        // Append the dictionary words from the DictionaryText without numbering
        // between DIC and /DIC
        content.append("dic\n");

        String[] dictionaryWords = DictionaryText.getText().substring(6).split("<br>");
        int wordStart;
        int wordEnd;
        for (int i = 0; i < dictionaryWords.length; i++) {
            wordStart = dictionaryWords[i].indexOf(" ", 8) + 1;
            wordEnd = dictionaryWords[i].indexOf("/") - 1;
            content.append(dictionaryWords[i].substring(wordStart, wordEnd).trim().toUpperCase());
            content.append("\n");
        }

        content.append("/dic\n");

        // Get the letters from the JLabels
        content.append("tab\n");
        JLabel[] labels = { jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, jLabel9, jLabel10,
                jLabel11, jLabel12, jLabel13, jLabel14, jLabel15, jLabel16 };
        content.append(labels[0].getText());
        for (int i = 1; i < labels.length; i++) {
            content.append(",");
            content.append(labels[i].getText());
        }
        content.append("\n/tab");

        // Write the combined content to the file
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
            writer.write(content.toString());
        } catch (IOException e) {
            // You can also show a message dialog to inform the user about the error
            JOptionPane.showMessageDialog(this, "Error Guardando Archivo: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Loads the graph, board, and dictionary with the inputs of the passed in File
     * object.
     * 
     * @param file file to read
     */
    private LinkedList<String> readFile(File file) {
        LinkedList<String> dictionaryWords = new LinkedList<>();
        String boardLine = "";
        boolean readingBoard = false;
        boolean readingDictionary = false;

    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
        String line;
        int letterCount = 0;

        while ((line = br.readLine()) != null) {
            // Remove commas and trim line
            line = line.replaceAll(",", "").trim();

            if (line.equals("tab")) {
                readingBoard = true;
                readingDictionary = false;
                continue;
            } else if (line.equals("/tab")) {
                readingBoard = false;
                continue;
            } else if (line.equals("dic")) {
                readingBoard = false;
                readingDictionary = true;
                continue;
            } else if (line.equals("/dic")) {
                readingDictionary = false;
                continue;
            }

            if (readingBoard) {
                boardLine = line;
                letterCount += line.length(); // Increment letter count
            } else if (readingDictionary) {
                if (line.length() < 3 || !line.chars().allMatch(Character::isLetter)) {
                    return null;
                }

                if (!line.matches("^\\d+\\..*")) {
                    dictionaryWords.add(line.toUpperCase());
                }
            }
        }

        // Validate letter count
        if (letterCount != 16) {
            JOptionPane.showMessageDialog(this, "El archivo no contiene exactamente 16 letras. Por favor, inténtelo de nuevo.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return null; // Return null if validation fails
        }else{
            populateBoard(boardLine);
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Error Leyendo Archivo: " + e.getMessage(), "Error",
                JOptionPane.ERROR_MESSAGE);
        return null; // Return null in case of any exception
    }

    return dictionaryWords;
}

    /**
     * Populates the graph and the board with the characters of the passed-in
     * String.
     * 
     * @param boardLine String containing the letters to put in the board
     */
    private void populateBoard(String boardLine) {
        // Populate the JLabel components with board letters
        Character[] graphBuilderArray = new Character[boardLine.length()];
        for (int i = 0; i < boardLine.length(); i++) {
            JLabel label = getLabelByIndex(i); // Get the corresponding JLabel
            label.setVisible(true);
            label.setText(String.valueOf(boardLine.charAt(i))); // Set text with board letter
            label.setVisible(true); // Make the label visible
            graphBuilderArray[i] = boardLine.charAt(i);
        }
        this.graphA = new AdjacencyMatrixGraph<>(graphBuilderArray, 4);
    }

    /**
     * Returns the board square with the passed in index.
     * 
     * @param index index of the board square to return
     * @return board square JLabel object
     */
    private JLabel getLabelByIndex(int index) {
        // Get the corresponding JLabel based on the index
        switch (index) {
            case 0:
                return jLabel1;
            case 1:
                return jLabel2;
            case 2:
                return jLabel3;
            case 3:
                return jLabel4;
            case 4:
                return jLabel5;
            case 5:
                return jLabel6;
            case 6:
                return jLabel7;
            case 7:
                return jLabel8;
            case 8:
                return jLabel9;
            case 9:
                return jLabel10;
            case 10:
                return jLabel11;
            case 11:
                return jLabel12;
            case 12:
                return jLabel13;
            case 13:
                return jLabel14;
            case 14:
                return jLabel15;
            case 15:
                return jLabel16;
            default:
                return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToDictionaryButton;
    private javax.swing.JScrollPane DictionaryPane;
    private javax.swing.JLabel DictionaryText;
    private javax.swing.JButton FindWordButton;
    private javax.swing.JTextField InputWord;
    private javax.swing.JButton InstructionsButton;
    private javax.swing.JButton LoadButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SearchDictionaryButton;
    private javax.swing.JLabel TimeLabel;
    private javax.swing.JLabel Title;
    private javax.swing.JButton VisualizeGraphButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
